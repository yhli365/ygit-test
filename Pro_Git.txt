
--Git Books: <Pro Git> http://git-scm.com/book/zh
-----------------------------------------------------------
>>>>>1. 起步
*)1.3 起步 - Git 基础
#文件的三种状态
对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。
由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。

*)1.5 起步 - 初次运行 Git 前的配置
$ git config --help
$ git help config
$ git config --system (cat /etc/gitconfig)
$ git config --global (cat ~/.gitconfig)
$ git config (cat .git/config)

$ git config --global user.name "yhli365"
$ git config --global user.email yhli365@126.com
$ git config --list
$ git config user.email

$ git config --global --unset user.name

>>>>>2. Git 基础
*)2.1 Git 基础 - 取得项目的 Git 仓库
$ cd /Y/GitHub
$ pwd
$ ls -al

#从现有仓库克隆
$ git clone https://github.com/yhli365/ygit-test.git
$ cd ygit-test
$ git remote -v

#在工作目录中初始化新仓库
$ mkdir ygit-test2
$ cd ygit-test2
$ git init

*)2.2 Git 基础 - 记录每次更新到仓库
#忽略某些文件
$ cat .gitignore
*.[oa]
*~

#文件 .gitignore 的格式规范如下：
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob 模式匹配。
匹配模式最后跟反斜杠（/）说明要忽略的是目录。
要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）

#查看已暂存和未暂存的更新
$ git status
$ echo "Hello world" > README
$ git add README
$ git checkout -- README
$ git commit -m 'initial project version'

$ git status
$ echo "Hello a1" > a1.txt
$ echo "Hello bb" >> README
$ git status
$ git add a1.txt
$ git add README
$ git status
$ echo "Hello cc" >> README
$ git status
$ git add README
$ git status
$ git commit -m 'add or edit file, show status'

$ echo "Hello diff1" >> README
$ git add README
$ echo "Hello diff2" >> README
$ git status
$ git diff
$ git diff --staged

#提交更新
$ git commit -m "Story 110: Show git diff command"

#跳过使用暂存区域
$ echo "Hello a2" > a2.txt
$ git status
$ git commit -am "Story 111: Show commit command"
$ git status

#移除文件
$ git add a2.txt
$ git commit -am "Story 112: git command: rm"
$ ls -al
$ git status

$ git rm a2.txt
$ ls -al
$ git status

$ git reset HEAD a2.txt
$ git checkout -- a2.txt
$ ls -al
$ git status

$ git rm --cached a2.txt
$ ls -al
$ git status
$ rm a2.txt
$ git status
$ git commit -am "Story 112b: git command: rm"

$ git rm log/\*.log

#移动文件
$ git mv a1.txt a1b.txt
$ git status
$ git commit -am "Story 113: git command: mv"

*)2.3 Git 基础 - 查看提交历史
#查看提交历史
$ git log
$ git log -p -2
$ git log -U1 --word-diff
$ git log --stat
$ git log --pretty=oneline
$ git log --pretty=format:"%h - %an, %ar : %s"
$ git log --pretty=format:"%h %s" --graph
$ git log --since=2.weeks
$ git log --stat README

#使用图形化工具查阅提交历史
$ gitk

*)2.4 Git 基础 - 撤消操作
#修改最后一次提交
$ git commit --amend
$ git log --stat -2

$ git commit -m 'initial commit'
$ echo "Hello forgotten" > forgotten_file
$ git add forgotten_file
$ git commit --amend
$ git status
$ git log --stat -2

#取消已经暂存的文件
$ echo "Hello reset" >> README
$ git add README
$ git status
$ git reset HEAD README
$ git status

#取消对文件的修改
$ git status
$ git checkout -- README
$ git status

*)2.5 Git 基础 - 远程仓库的使用
#查看当前的远程库
$ git remote -v

#添加远程仓库
$ git remote add ytest https://github.com/yhli365/ygit-test.git

#从远程仓库抓取数据
$ git fetch origin
$ git status
$ ls -al

$ git branch --set-upstream-to=origin/master master
$ git pull
$ git status
$ ls -al

#推送数据到远程仓库
$ git push origin master

#查看远程仓库信息
$ git remote show origin

#远程仓库的删除和重命名
$ git remote rename ytest origin
$ git remote remove origin

*)2.6 Git 基础 - 打标签
#列显已有的标签
$ git tag
$ git tag -l 'v1.4.2.*'

#含附注的标签
$ git tag -a v1.1 -m 'my version 1.1'
$ git tag
$ git show v1.1

#轻量级标签
$ git tag v1.1-lw
$ git tag
$ git show v1.1-lw

#签署标签
$ git tag -s v1.5 -m 'my signed 1.5 tag'
$ git show v1.5

#验证标签
$ git tag -v v1.5
$ git tag -v v1.1

#后期加注标签
$ git log --pretty=oneline
$ git tag -a v1.0 24ccc57 -m 'my version 1.0: history'
$ git tag
$ git tag -v v1.0

#删除标签
$ git tag -d v1.0
$ git tag -a v1.0 f09f6049 -m 'my version 1.0: history'
$ git show v1.0

#分享标签
$ git push origin v1.0
$ git push origin --tags

*)2.7 Git 基础 - 技巧和窍门
#自动补全
$ source ~/.git-completion.bash

#Git 命令别名
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status

$ git config --global alias.unstage 'reset HEAD --'
$ git unstage fileA
$ git reset HEAD fileA

$ git config --global alias.last 'log -1 HEAD'
$ git last

$ git config --global alias.visual '!gitk'
$ git visual

$ git config --global --unset alias.visual
$ git config --list

>>>>>3. Git 分支
*)3.1 Git 分支 - 何谓分支
$ git branch testing

$ git checkout testing
$ echo "test branch" >> README
$ git commit -a -m 'Story 3.1a: branch test'
$ git status
$ cat README

$ git checkout master
$ echo "test branch: master" >> README
$ git commit -a -m 'Story 3.1a: branch master'
$ git status
$ cat README

$ git branch
$ git branch --list

*)3.2 Git 分支 - 分支的新建与合并
#分支的新建与切换
$ git checkout -b iss53
$ echo "branch: iss53" >> README
$ git commit -a -m 'Story 3.2a: added a new footer [issue 53]'
$ git status

$ git checkout master
$ git checkout -b hotfix
$ git branch
$ echo "branch: hotfix" >> README
$ git commit -a -m 'Story 3.2b: fixed the broken email address'

$ git checkout master
$ git merge hotfix
$ git log -2

$ git branch -d hotfix
$ git branch

$ git checkout iss53
$ echo "branch: iss53, m2" >> README
$ git commit -a -m 'Story 3.2a: finished the new footer [issue 53]'
$ git log -2
$ cat README

#分支的合并
$ git checkout master
$ git merge iss53

#遇到冲突时的分支合并
$ git status
$ vim README [$ git mergetool]
$ git add README
$ git status
$ git commit
$ git status

#删除不需要的分支
$ git branch -d iss53

*)3.3 Git 分支 - 分支的管理
$ git branch
$ git branch -v
$ git branch --merged
$ git branch --no-merged
$ git branch -d testing

$ git branch -D testing

*)3.4 Git 分支 - 利用分支进行开发的工作流程
请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的 Git 仓库中进行的 ― 完全不涉及与服务器的交互。

*)3.5 Git 分支 - 远程分支
#推送本地分支
$ git branch serverfix
$ git push origin serverfix
$ git branch

#跟踪远程分支
$ git checkout --track origin/serverfix
@$ git checkout -b sf origin/serverfix
$ git branch

$ echo "branch: origin/serverfix" >> README
$ git commit -a -m 'Story 3.5a: track origin/serverfix'
$ git log -2
$ git pull

$ git config --global push.default simple
$ git push
@$ git push origin HEAD:serverfix
$ git log -2

#删除远程分支
$ git push origin :serverfix

*)3.6 Git 分支 - 分支的衍合
把一个分支中的修改整合到另一个分支的办法有两种：merge 和 rebase
一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁

#基本的衍合操作
$ git checkout -b experiment
$ echo "branch: experiment, m1" >> README
$ git commit -a -m 'Story 3.6a: branch: experiment, m1'
$ echo "branch: experiment, m2" >> README
$ git commit -a -m 'Story 3.6b: branch: experiment, m2'
$ git status
$ git log -3

$ git checkout master
$ echo "branch: master.rebase, m1" >> README
$ git commit -a -m 'Story 3.6c: branch: master.rebase, m1'
$ git status
$ git log -3

$ git checkout experiment
$ git rebase master

$ cat .git/rebase-apply/patch
$ vim README
$ git add README
$ git rebase --continue [continue|skip|abort]

$ git checkout master
$ git status
$ git log -p -3
$ cat README
$ git push

#有趣的衍合
$ git rebase --onto master server client

$ git checkout master
$ git merge client

$ git rebase master server

$ git checkout master
$ git merge server

$ git branch -d client
$ git branch -d server

#衍合的风险
呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：
一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作

在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用 git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。

如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。

>>>>>4. 服务器上的 Git
*)4.1 服务器上的 Git - 协议
Git 可以使用四种主要的协议来传输数据：本地传输，SSH 协议，Git 协议和 HTTP 协议。
值得注意的是，除了 HTTP 协议外，其他所有协议都要求在服务器端安装并运行 Git。

#本地协议
$ git clone /opt/git/project.git
$ git clone file:///opt/git/project.git
$ git remote add local_proj /opt/git/project.git

#SSH 协议
$ git clone ssh://user@server/project.git
$ git clone user@server:project.git

#Git 协议

#HTTP/S 协议
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update

$ git clone http://example.com/gitproject.git

*)4.2 服务器上的 Git - 在服务器上部署 Git
#在服务器上部署 Git
$ git clone --bare my_project my_project.git

#把裸仓库移到服务器上
$ scp -r my_project.git user@git.example.com:/opt/git

$ git clone user@git.example.com:/opt/git/my_project.git

$ ssh user@git.example.com
$ cd /opt/git/my_project.git
$ git init --bare --shared

#小型安装
架设Git服务最复杂的地方在于账户管理。如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可的安排就比较困难。

第二个办法是在主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。

*)4.3 服务器上的 Git - 生成 SSH 公钥
#生成 SSH 公钥

#Step 1: Check for SSH keys
大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。
$ cd ~/.ssh
$ ls
关键是看有没有用 something 和 something.pub 来命名的一对文件，这个 something 通常就是 id_dsa 或 id_rsa。有 .pub 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：

#Step 2: Generate a new SSH key
$ ssh-keygen -t rsa -C "your_email@example.com"
passphrase: sky1****5
$ cat ~/.ssh/id_rsa.pub
关于在多个操作系统上设立相同 SSH 公钥的教程，可以查阅 GitHub 上有关 SSH 公钥的向导：http://github.com/guides/providing-your-ssh-key。

Then add your new key to the ssh-agent:
# start the ssh-agent in the background
$ eval `ssh-agent -s`
Agent pid 59566
$ ssh-add ~/.ssh/id_rsa

#Step 3: Add your SSH key to GitHub
$ clip < ~/.ssh/id_rsa.pub
Account settings / SSH Keys

#Step 4: Test everything out
$ ssh -T git@github.com


*)4.4 服务器上的 Git - 架设服务器
#架设服务器
本例将使用 authorized_keys 方法来给用户授权。

#创建一个名为 'git' 的用户，并为其创建一个 .ssh 目录
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh

#把开发者的 SSH 公钥添加到这个用户的 authorized_keys 文件中。
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys

#现在可以用 --bare 选项运行 git init 来建立一个裸仓库，这会初始化一个不包含工作目录的仓库。
$ cd /opt/git
$ mkdir project.git
$ cd project.git
$ git --bare init

#这时，Join，Josie或者Jessica就可以把它加为远程仓库，推送一个分支，从而把第一个版本的项目文件上传到仓库里了。值得注意的是，每次添加一个新项目都需要通过 shell 登入主机并创建一个裸仓库目录。
# 在 John 的电脑上
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git remote add origin git@gitserver:/opt/git/project.git
$ git push origin master

#这样，其他人的克隆和推送也一样变得很简单：
$ git clone git@gitserver:/opt/git/project.git
$ cd project
$ vim README
$ git commit -am 'fix for the README file'
$ git push origin master

#用这个方法可以很快捷地为少数几个开发者架设一个可读写的 Git 服务。
#作为一个额外的防范措施，你可以用 Git 自带的 git-shell 工具限制 git 用户的活动范围。
$ sudo vim /etc/passwd
在文件末尾，你应该能找到类似这样的行：
git:x:1000:1000::/home/git:/bin/sh
把 bin/sh 改为 /usr/bin/git-shell （或者用 which git-shell 查看它的实际安装路径）。该行修改后的样子如下：
git:x:1000:1000::/home/git:/usr/bin/git-shell
现在 git 用户只能用 SSH 连接来推送和获取 Git 仓库，而不能直接使用主机 shell。尝试普通 SSH 登录的话，会看到下面这样的拒绝信息：
$ ssh git@gitserver
fatal: What do you think I am? A shell?
Connection to gitserver closed.

*)4.5 服务器上的 Git - 公共访问
匿名的读取权限该怎么实现呢？或许对小型的配置来说最简单的办法就是运行一个静态 web 服务，把它的根目录设定为 Git 仓库所在的位置，然后开启本章第一节提到的 post-update 挂钩。
*)4.6 服务器上的 Git - GitWeb
Git 自带一个叫做 GitWeb 的 CGI 脚本，运行效果可以到 http://git.kernel.org 这样的站点体验下。
*)4.7 服务器上的 Git - Gitosis
简单地说，Gitosis就是一套用来管理authorized_keys文件和实现简单连接限制的脚本。有趣的是，用来添加用户和设定权限的并非通过网页程序，而只是管理一个特殊Git仓库。你只需要在这个特殊仓库内做好相应的设定，然后推送到服务器上，Gitosis 就会随之改变运行策略，听起来就很酷，对吧？
*)4.8 服务器上的 Git - Gitolite
Gitolite是在Git之上的一个授权层，依托sshd或者httpd来进行认证。（概括：认证是确定用户是谁，授权是决定该用户是否被允许做他想做的事情）。
Gitolite允许你定义访问许可而不只作用于仓库，而同样于仓库中的每个branch和tag name。你可以定义确切的人(或一组人)只能push特定的"refs"(或者branches或者tags)而不是其他人。
*)4.9 服务器上的 Git - Git 守护进程
对于提供公共的，非授权的只读访问，我们可以抛弃 HTTP 协议，改用 Git 自己的协议，这主要是出于性能和速度的考虑。Git 协议远比 HTTP 协议高效，因而访问速度也快，所以它能节省很多用户的时间。
$ git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
*)4.10 服务器上的 Git - Git 托管服务
https://git.wiki.kernel.org/index.php/GitHosting


>>>>>5. 分布式 Git
*)5.1 分布式 Git - 分布式工作流程
*)5.2 分布式 Git - 为项目作贡献
*)5.3 分布式 Git - 项目的管理
#决断代码取舍
#一般我们会先看下，特性分支上都有哪些新增的提交。
$ git log contrib --not master

#如果想看当前分支同其他分支合并时的完整内容差异，有个小窍门：
$ git diff master
虽然能得到差异内容，但请记住，结果有可能和我们的预期不同。

#我们可以手工定位它们的共同祖先，然后与之比较：
$ git merge-base contrib master
36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
$ git diff 36c7db

#对于 diff 命令，可以把 ... 加在原始分支（拥有共同祖先）和当前分支之间：
$ git diff master...contrib

#挑拣（cherry-pick）
$ git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf

#生成内部版本号
$ git describe master

#准备发布
$ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz
$ ls *.tar.gz

#制作简报
$ git shortlog --no-merges master --not v1.0


>>>>>6. Git 工具
*)6.1 Git 工具 - 修订版本（Revision）选择
--#单个修订版本
$ git log
$ git log --abbrev-commit --pretty=oneline

$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
$ git show 1c002dd4b536e7479f
$ git show 1c002d

#分支引用
$ git show topic1
$ git rev-parse topic1

#引用日志里的简称
$ git reflog

$ git show HEAD@{5}
$ git show master@{yesterday}
$ git show HEAD@{2.months.ago}

$ git log -g master

#祖先引用
$ git log --pretty=format:'%h %s' --graph

$ git show HEAD^
$ git show d921970^
$ git show d921970^2

$ git show HEAD~
$ git show HEAD~3
$ git show HEAD^^^

$ git show HEAD~3^2

--#提交范围
#双点
$ git log master..experiment
$ git log experiment..master

$ git log origin/master..HEAD
$ git log origin/master..

#多点
使用^字符或者--not指明你不希望提交被包含其中的分支。因此下面三个命令是等同的：
$ git log refA..refB
$ git log ^refA refB
$ git log refB --not refA

查找所有从refA或refB包含的但是不被refC包含的提交
$ git log refA refB ^refC
$ git log refA refB --not refC

#三点
$ git log master...experiment
$ git log --left-right master...experiment


*)6.2 Git 工具 - 交互式暂存
$ git add -i
$ git add -p

*)6.3 Git 工具 - 储藏（Stashing）
$ git status
$ git stash
$ git stash list
$ git stash apply stash@{2}
$ git stash apply --index
$ git stash drop stash@{0}

#取消储藏(Un-applying a Stash)
$ git stash show -p stash@{0} | git apply -R
$ git stash show -p | git apply -R

#从储藏中创建分支
$ git stash branch testchanges

*)6.4 Git 工具 - 重写历史
#改变最近一次提交
$ git commit --amend

#修改多个提交说明
$ git rebase -i HEAD~3
$ git commit --amend
$ git rebase --continue

#重排提交
你也可以使用交互式的衍合来彻底重排或删除提交。

#压制(Squashing)提交
交互式的衍合工具还可以将一系列提交压制为单一提交。

#拆分提交
拆分提交就是撤销一次提交，然后多次部分地暂存或提交直到结束。
$ git reset HEAD^
$ git add README
$ git commit -m 'updated README formatting'
$ git add lib/simplegit.rb
$ git commit -m 'added blame'
$ git rebase --continue

#核弹级选项: filter-branch
从所有提交中删除一个文件
$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
$ git filter-branch --tree-filter "find * -type f -name '*~' -delete" HEAD

将一个子目录设置为新的根目录
$ git filter-branch --subdirectory-filter trunk HEAD

全局性地更换电子邮件地址
$ git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
        then
                GIT_AUTHOR_NAME="Scott Chacon";
                GIT_AUTHOR_EMAIL="schacon@example.com";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD


*)6.5 Git 工具 - 使用 Git 调试
#文件标注
$ git blame -L 12,22 simplegit.rb
$ git blame -C -L 141,153 GITPackUpload.m

#二分查找
$ git bisect start
$ git bisect bad
$ git bisect good v1.0
$ git bisect reset

$ git bisect start HEAD v1.0
$ git bisect run test-error.sh

*)6.6 Git 工具 - 子模块
$ git submodule add git://github.com/chneukirchen/rack.git rack
$ cat .gitmodules

$ git clone git://github.com/schacon/myproject.git
$ git submodule init
$ git submodule update

>>>>>7. 自定义 Git
*)7.1 自定义 Git - 配置 Git
#配置 Git	
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com	

#客户端基本配置		
$ git config --global core.editor emacs		

$ git config --global commit.template $HOME/.gitmessage.txt
$ git commit

$ git config --global core.pager 'less'
		
$ git config --global user.signingkey <gpg-key-id>
$ git tag -s <tag-name>

core.excludesfile
help.autocorrect

#Git中的着色
$ git config --global color.ui true

#外部的合并与比较工具
下载P4Merge（译注：Perforce图形化合并工具）：
http://www.perforce.com/perforce/downloads/component.html

#格式化与空白
$ git config --global core.autocrlf true	
		
		
		

















